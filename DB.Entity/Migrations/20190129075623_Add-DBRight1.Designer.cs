// <auto-generated />
using System;
using DB.Entity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DB.Entity.Migrations
{
    [DbContext(typeof(BaseDbContext))]
    [Migration("20190129075623_Add-DBRight1")]
    partial class AddDBRight1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DB.Entity.Model.ModuleButtionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ButtionName");

                    b.Property<Guid>("ModuleId");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("T_ModuleButtion");
                });

            modelBuilder.Entity("DB.Entity.Model.ModuleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("Pid");

                    b.Property<string>("Url");

                    b.Property<string>("UrlName");

                    b.HasKey("Id");

                    b.ToTable("T_Module");
                });

            modelBuilder.Entity("DB.Entity.Model.RoleButtionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("CreationUser");

                    b.Property<bool>("IsStatus");

                    b.Property<Guid>("ModuleButtionId");

                    b.Property<Guid>("RoleId");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("WorkflowApprover");

                    b.Property<DateTime>("WorkflowCreationTime");

                    b.Property<int?>("WorkflowStatus");

                    b.Property<DateTime>("WorkflowTime");

                    b.HasKey("Id");

                    b.ToTable("T_RoleButtion");
                });

            modelBuilder.Entity("DB.Entity.Model.RoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("CreationUser");

                    b.Property<bool>("IsStatus");

                    b.Property<Guid>("Pid");

                    b.Property<string>("RoleName");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("WorkflowApprover");

                    b.Property<DateTime>("WorkflowCreationTime");

                    b.Property<int?>("WorkflowStatus");

                    b.Property<DateTime>("WorkflowTime");

                    b.HasKey("Id");

                    b.ToTable("T_Role");
                });

            modelBuilder.Entity("DB.Entity.Model.RoleModuleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("CreationUser");

                    b.Property<bool>("IsStatus");

                    b.Property<Guid>("ModuleId");

                    b.Property<Guid>("RoleId");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("WorkflowApprover");

                    b.Property<DateTime>("WorkflowCreationTime");

                    b.Property<int?>("WorkflowStatus");

                    b.Property<DateTime>("WorkflowTime");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("RoleId");

                    b.ToTable("T_RoleModule");
                });

            modelBuilder.Entity("DB.Entity.Model.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("CreationUser");

                    b.Property<bool>("IsStatus");

                    b.Property<string>("Mail");

                    b.Property<string>("PhoneNumber");

                    b.Property<int>("Status");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UserAccount");

                    b.Property<string>("UserName");

                    b.Property<string>("UserNumber");

                    b.Property<string>("UserPassword");

                    b.Property<string>("WorkflowApprover");

                    b.Property<DateTime>("WorkflowCreationTime");

                    b.Property<int?>("WorkflowStatus");

                    b.Property<DateTime>("WorkflowTime");

                    b.HasKey("Id");

                    b.ToTable("T_User");
                });

            modelBuilder.Entity("DB.Entity.Model.UserRoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("CreationUser");

                    b.Property<bool>("IsStatus");

                    b.Property<Guid>("RoleId");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<Guid>("UserId");

                    b.Property<string>("WorkflowApprover");

                    b.Property<DateTime>("WorkflowCreationTime");

                    b.Property<int?>("WorkflowStatus");

                    b.Property<DateTime>("WorkflowTime");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("T_UserRole");
                });

            modelBuilder.Entity("DB.Entity.Workflow.WorkflowConfigureEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConfigureName");

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("CreationUser");

                    b.Property<bool>("IsStatus");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("Id");

                    b.ToTable("T_RorkflowConfigure");
                });

            modelBuilder.Entity("DB.Entity.Workflow.WorkflowProcessEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("CreationUser");

                    b.Property<bool>("IsStatus");

                    b.Property<long>("Sequence");

                    b.Property<string>("SequenceName");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<Guid?>("WorkflowConfigureEntityId");

                    b.Property<Guid>("WorkflowConfigureId");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowConfigureEntityId");

                    b.ToTable("T_WorkflowProcess");
                });

            modelBuilder.Entity("DB.Entity.Model.ModuleButtionEntity", b =>
                {
                    b.HasOne("DB.Entity.Model.ModuleEntity", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DB.Entity.Model.RoleModuleEntity", b =>
                {
                    b.HasOne("DB.Entity.Model.ModuleEntity", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DB.Entity.Model.RoleEntity", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DB.Entity.Model.UserRoleEntity", b =>
                {
                    b.HasOne("DB.Entity.Model.RoleEntity", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DB.Entity.Model.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DB.Entity.Workflow.WorkflowProcessEntity", b =>
                {
                    b.HasOne("DB.Entity.Workflow.WorkflowConfigureEntity", "WorkflowConfigureEntity")
                        .WithMany()
                        .HasForeignKey("WorkflowConfigureEntityId");
                });
#pragma warning restore 612, 618
        }
    }
}
